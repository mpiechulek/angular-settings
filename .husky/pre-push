#!/usr/bin/env sh
# Prevents force-pushing to master

# echo -e "===\n>> Talenavi Pre-push Hook: Checking branch name / Mengecek nama branch..."

# BRANCH=`git rev-parse --abbrev-ref HEAD`
# PROTECTED_BRANCHES="^(master|develop)"

# if [[ $1 != *"$BRANCH"* ]]
# then
#   echo -e "\nðŸš« You must use (git push origin $BRANCH) / Anda harus menggunakan (git push origin $BRANCH).\n" && exit 1
# fi

# if [[ "$BRANCH" =~ $PROTECTED_BRANCHES ]]
# then
#   echo -e "\nðŸš« Cannot push to remote $BRANCH branch, please create your own branch and use PR."
#   echo -e "ðŸš« Tidak bisa push ke remote branch $BRANCH, silahkan buat branch kamu sendiri dan gunakan pull request.\n" && exit 1
# fi

# echo -e ">> Finish checking branch name / Selesai mengecek nama branch.\n==="

# exit 0

# # Path to your coverage report
# COVERAGE_REPORT_PATH='./coverage/front/index.xml'

# # Desired minimum coverage percentage
# MIN_COVERAGE=80

# # Extract coverage percentage from the report
# COVERAGE=$(xmlstarlet sel -t -v '//coverageLine/@linesCovered' $COVERAGE_REPORT_PATH | awk '{print ($1*100)/$2}')

# if (( $(echo "$COVERAGE < $MIN_COVERAGE" | bc -l) )); then
#   echo "Coverage is below the required threshold of $MIN_COVERAGE%"
#   exit 1
# else
#   echo "Coverage meets the required threshold."
#   exit 0
# fi

. "$(dirname "$0")/_/husky.sh"

test_exit_code=$?

# Perform the coverage check
coverage_exit_code=$?

# Output the exit codes for debugging purposes
echo "Test exit code: $test_exit_code"
echo "Coverage check exit code: $coverage_exit_code"

# Block push if either tests failed or coverage is insufficient
if [ $test_exit_code -ne 0 ] || [ $coverage_exit_code -ne 0 ]; then
  echo "Tests failed or code coverage threshold not met. Aborting push!!!"
  exit 1
else
  echo "Tests passed and code coverage threshold met. Proceeding with push. :)"
fi